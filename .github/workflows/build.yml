name: "build"

on: # rebuild any PRs and main branch changes
  push:
    branches: ["main"]
  pull_request:
    # branches: ["main", "feature/*"]
  workflow_dispatch:

jobs:
  # Check code formatting and static analysis on a single OS (linux)
  # against Dart dev.
  test:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # or: macos-latest, windows-latest
        channel: [stable, beta, main]

    steps:
      - uses: actions/checkout@v4
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.ref }}

      - uses: subosito/flutter-action@v2
        with:
          channel: ${{ matrix.channel }}

      - id: disabled_analytics_flutter
        name: Disabled Analytics Flutter
        run: flutter config --no-analytics

      - id: disabled_analytics_dart
        name: Disabled Analytics Dart
        run: dart --disable-analytics

      - id: checking_version_flutter
        name: Check version Flutter is installed
        run: flutter --version

      - id: checking_version_dart
        name: Check version Dart is installed
        run: dart --version

      - name: 📦 Install Dependencies
        run: flutter pub get

      # Verifies if the dart code is formatted well
      - name: ✨ Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if the any code is not well formatted
        # --output=none prints files which needs to be formatted
        # if: always() && steps.install.outcome == 'success'

        # Checks for Symantic errors. Can be configured using analysis_options.yaml
      - name: 🔍 Analyze project source
        run: dart analyze --fatal-infos
        # optionally use --fatal-warnings to stop execution if any warnings are found
        # if: always() && steps.install.outcome == 'success'

        # Checks for the quality and consistency of Dart code. Can be configured using analysis_options.yaml
      - name: 🔍 Analyze project source (Dart code Linter - DCL)
        run: dart run dart_code_linter:metrics analyze .

      - name: 🔍 Analyze check unused files (DCL)
        run: dart run dart_code_linter:metrics check-unused-files lib

      - name: 🔍 Analyze check unused l10n (DCL)
        run: dart run dart_code_linter:metrics check-unused-l10n .

      - name: 🔍 Analyze check unused code (DCL)
        run: dart run dart_code_linter:metrics check-unused-code .

      - name: 🔍 Analyze check unnecessary nullable (DCL)
        run: dart run dart_code_linter:metrics check-unnecessary-nullable .

      - name: 🧪 Run Tests with coverage
        run: flutter test --test-randomize-ordering-seed random --coverage
        # if: always() && steps.install.outcome == 'success'

      - name: 📦 Pre-publish - dry run
        run: dart pub publish --dry-run

      - name: 📊 Check Code Coverage
        uses: VeryGoodOpenSource/very_good_coverage@v3
        with:
          path: "./coverage/lcov.info"
          min_coverage: 94

      - name: ⬆️ Upload Coverage to Coveralls
        uses: coverallsapp/github-action@v2.2.3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage/lcov.info

      - id: run_package_flutter_coverage_badge
        name: Run package flutter_coverage_badge
        run: dart run flutter_coverage_badge

      - name: Commit changes
        uses: EndBug/add-and-commit@v9
        with:
          author_name: Andrés García
          author_email: dev@tech-andgar.me
          message: 'Updated coverage_badge.svg'
          add: 'coverage_badge.svg'
